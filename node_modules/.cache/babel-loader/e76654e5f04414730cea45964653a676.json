{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\n\nexport default function useNavigationState(selector) {\n  const navigation = useNavigation(); // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n\n  const [, setResult] = React.useState(() => selector(navigation.dangerouslyGetState())); // We store the selector in a ref to avoid re-subscribing listeners every render\n\n  const selectorRef = React.useRef(selector);\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', e => {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.dangerouslyGetState());\n}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","useNavigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,aAAA,MAAA,iBAAA;AAIA;;;;;;AAKA,eAAe,SAAA,kBAAA,CAAA,QAAA,EAAyD;AACtE,QAAMA,UAAU,GAAGC,aADmD,EACtE,CADsE,CAGtE;AACA;;AACA,QAAM,GAAA,SAAA,IAAgBC,KAAK,CAALA,QAAAA,CAAe,MACnCC,QAAQ,CAACH,UAAU,CANiD,mBAM3DA,EAAD,CADYE,CAAtB,CALsE,CAStE;;AACA,QAAME,WAAW,GAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpBE,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AADFF,GAAAA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,UAAMG,WAAW,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiCC,CAAD,IAAO;AACzDC,MAAAA,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG;AADF,KAAoB,CAApB;AAIA,WAAA,WAAA;AALFL,GAAAA,EAMG,CANHA,UAMG,CANHA;AAQA,SAAOC,QAAQ,CAACH,UAAU,CAA1B,mBAAgBA,EAAD,CAAf;AACD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]},"metadata":{},"sourceType":"module"}