{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Whether there's a `history.go(n)` pending\n\n  let pending = false;\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      var _items$index;\n\n      return (_items$index = items[index]) === null || _items$index === void 0 ? void 0 : _items$index.state;\n    },\n\n    backIndex({\n      path\n    }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({\n      path,\n      state\n    }) {\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace({\n      path,\n      state\n    }) {\n      var _window$history$state2, _window$history$state3;\n\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (items.length) {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({\n          path,\n          state,\n          id\n        });\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the index\n        // Otherwise we'll exit the page\n        n = Math.max(n, -Math.max(index + 1, 1));\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n      return new Promise(resolve => {\n        pending = true;\n\n        const done = () => {\n          pending = false;\n          window.removeEventListener('popstate', done);\n          resolve();\n        }; // Resolve the promise in the next frame\n        // If `popstate` hasn't fired by then, then it wasn't handled\n\n\n        requestAnimationFrame(() => requestAnimationFrame(done));\n        window.addEventListener('popstate', done);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\nexport default function useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = getStateFromPathDefault,\n  getPathFromState = getPathFromStateDefault\n}) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    } // Make it a thenable to keep consistent with the native impl\n\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const recordedState = history.get(history.index);\n\n      if (recordedState) {\n        navigation.resetRoot(recordedState);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({\n        path,\n        state\n      });\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          if (nextIndex !== -1 && nextIndex < currentIndex) {\n            // An existing entry for this path exists and it's less than current index, go back to that\n            await history.go(nextIndex - currentIndex);\n          } else {\n            // We couldn't find an existing entry to go back to, so we'll go back by the delta\n            // This won't be correct if multiple routes were pushed in one go before\n            // Usually this shouldn't happen and this is a fallback for that\n            await history.go(historyDelta);\n          } // Store the updated state as well as fix the path if incorrect\n\n\n          history.replace({\n            path,\n            state\n          });\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getStateFromPath","getPathFromState","createMemoryHistory","index","items","pending","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","n","Math","resolve","done","requestAnimationFrame","listen","onPopState","listener","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","cb","handling","queue","callback","last","isUsingLinking","enabled","getPathFromStateDefault","React","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","server","getInitialState","location","value","thenable","then","Promise","onfulfilled","catch","previousStateRef","pendingPopStatePathRef","navigation","ref","recordedState","action","getActionFromState","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Whether there's a `history.go(n)` pending\n  let pending = false;\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index]?.state;\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the index\n        // Otherwise we'll exit the page\n        n = Math.max(n, -Math.max(index + 1, 1));\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      return new Promise((resolve) => {\n        pending = true;\n\n        const done = () => {\n          pending = false;\n\n          window.removeEventListener('popstate', done);\n          resolve();\n        };\n\n        // Resolve the promise in the next frame\n        // If `popstate` hasn't fired by then, then it wasn't handled\n        requestAnimationFrame(() => requestAnimationFrame(done));\n\n        window.addEventListener('popstate', done);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    // Make it a thenable to keep consistent with the native impl\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const recordedState = history.get(history.index);\n\n      if (recordedState) {\n        navigation.resetRoot(recordedState);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({ path, state });\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          if (nextIndex !== -1 && nextIndex < currentIndex) {\n            // An existing entry for this path exists and it's less than current index, go back to that\n            await history.go(nextIndex - currentIndex);\n          } else {\n            // We couldn't find an existing entry to go back to, so we'll go back by the delta\n            // This won't be correct if multiple routes were pushed in one go before\n            // Usually this shouldn't happen and this is a fallback for that\n            await history.go(historyDelta);\n          }\n\n          // Store the updated state as well as fix the path if incorrect\n          history.replace({ path, state });\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}