{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n\n};\n\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index,\n    history\n  });\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history'\n}) {\n  const router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: \"\".concat(name, \"-\").concat(nanoid()),\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      var _state$history, _history;\n\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat(nanoid()),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      const index = Math.min(Math.max(typeof state.index === 'number' ? state.index : routeNames.indexOf(state.routes[0].name), 0), routes.length - 1);\n      let history = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key));\n\n      if (!((_history = history) === null || _history === void 0 ? void 0 : _history.length)) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat(nanoid()),\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList\n    }) {\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name) || {\n        name,\n        key: \"\".concat(name, \"-\").concat(nanoid()),\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(it => routes.find(r => r.key === it.key));\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history,\n        routeNames,\n        routes,\n        index\n      });\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: action.payload.params !== undefined ? state.routes.map((route, i) => i === index ? _objectSpread(_objectSpread({}, route), {}, {\n                params: _objectSpread(_objectSpread({}, route.params), action.payload.params)\n              }) : route) : state.routes\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n\n            if (index === -1) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index\n            });\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions\n  });\n\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","type","payload","params","getRouteHistory","history","key","routes","i","initialRouteIndex","route","changeIndex","backBehavior","currentKey","state","it","router","getInitialState","routeParamList","index","initialRouteName","routeNames","name","nanoid","stale","getRehydratedState","r","undefined","Math","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","previousKey","BaseRouter","shouldActionChangeFocus","actionCreators"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,QAAA,mBAAA;AACA,OAAA,UAAA,MAAA,cAAA;AAiDA,MAAMA,UAAU,GAAhB,OAAA;AAEA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,MAAM,CAAA,IAAA,EAAA,MAAA,EAA+C;AACnD,WAAO;AAAEC,MAAAA,IAAI,EAAN,SAAA;AAAmBC,MAAAA,OAAO,EAAE;AAAA,QAAA,IAAA;AAAQC,QAAAA;AAAR;AAA5B,KAAP;AACD;;AAHuB,CAAnB;;AAMP,MAAMC,eAAe,GAAG,CAAA,MAAA,EAAA,KAAA,EAAA,YAAA,EAAA,gBAAA,KAKnB;AACH,QAAMC,OAAO,GAAG,CAAC;AAAEJ,IAAAA,IAAI,EAAN,UAAA;AAAoBK,IAAAA,GAAG,EAAEC,MAAM,CAANA,KAAM,CAANA,CAAcD;AAAvC,GAAD,CAAhB;AACA,MAAA,iBAAA;;AAEA,UAAA,YAAA;AACE,SAAA,OAAA;AACE,WAAK,IAAIE,CAAC,GAAV,KAAA,EAAoBA,CAAC,GAArB,CAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9BH,QAAAA,OAAO,CAAPA,OAAAA,CAAgB;AAAEJ,UAAAA,IAAI,EAAN,UAAA;AAAoBK,UAAAA,GAAG,EAAEC,MAAM,CAACC,CAAC,GAARD,CAAM,CAANA,CAAcD;AAAvC,SAAhBD;AACD;;AACD;;AACF,SAAA,cAAA;AACEI,MAAAA,iBAAiB,GAAGF,MAAM,CAANA,SAAAA,CACjBG,KAAD,IAAWA,KAAK,CAALA,IAAAA,KADbD,gBAAoBF,CAApBE;AAGAA,MAAAA,iBAAiB,GAAGA,iBAAiB,KAAK,CAAtBA,CAAAA,GAAAA,CAAAA,GAApBA,iBAAAA;;AAEA,UAAIA,iBAAiB,KAArB,KAAA,EAAiC;AAC/BJ,QAAAA,OAAO,CAAPA,OAAAA,CAAgB;AACdJ,UAAAA,IAAI,EADU,UAAA;AAEdK,UAAAA,GAAG,EAAEC,MAAM,CAANA,iBAAM,CAANA,CAA0BD;AAFjB,SAAhBD;AAID;;AACD;;AACF,SAAA,SAAA;AACE;AACA;AArBJ;;AAwBA,SAAA,OAAA;AAjCF,CAAA;;AAoCA,MAAMM,WAAW,GAAG,CAAA,KAAA,EAAA,KAAA,EAAA,YAAA,EAAA,gBAAA,KAKf;AACH,MAAA,OAAA;;AAEA,MAAIC,YAAY,KAAhB,SAAA,EAAgC;AAC9B,UAAMC,UAAU,GAAGC,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EAAnB,GAAA;AAEAT,IAAAA,OAAO,GAAG,KAAK,CAAL,OAAA,CAAA,MAAA,CACCU,EAAD,IAASA,EAAE,CAAFA,IAAAA,KAAAA,OAAAA,GAAsBA,EAAE,CAAFA,GAAAA,KAAtBA,UAAAA,GADT,KAAA,EAAA,MAAA,CAEA;AAAEd,MAAAA,IAAI,EAAN,UAAA;AAAoBK,MAAAA,GAAG,EAAEO;AAAzB,KAFA,CAAVR;AAHF,GAAA,MAMO;AACLA,IAAAA,OAAO,GAAGD,eAAe,CACvBU,KAAK,CADkB,MAAA,EAAA,KAAA,EAAA,YAAA,EAAzBT,gBAAyB,CAAzBA;AAMD;;AAED,SAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAA,IAAA,KAAA;AAGEA,IAAAA;AAHF,GAAA,CAAA;AAvBF,CAAA;;AA8BA,eAAe,SAAA,SAAA,CAAmB;AAAA,EAAA,gBAAA;AAEhCO,EAAAA,YAAY,GAAG;AAFiB,CAAnB,EAGM;AACnB,QAAMI,MAGL,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA;AAGCf,IAAAA,IAAI,EAHL,KAAA;;AAKCgB,IAAAA,eAAe,CAAC;AAAA,MAAA,UAAA;AAAcC,MAAAA;AAAd,KAAD,EAAiC;AAC9C,YAAMC,KAAK,GACTC,gBAAgB,KAAhBA,SAAAA,IAAkCC,UAAU,CAAVA,QAAAA,CAAlCD,gBAAkCC,CAAlCD,GACIC,UAAU,CAAVA,OAAAA,CADJD,gBACIC,CADJD,GADF,CAAA;AAKA,YAAMb,MAAM,GAAG,UAAU,CAAV,GAAA,CAAgBe,IAAD,KAAW;AAAA,QAAA,IAAA;AAEvChB,QAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CAAaiB,MAFuB,EAEpC,CAFoC;AAGvCpB,QAAAA,MAAM,EAAEe,cAAc,CAAA,IAAA;AAHiB,OAAX,CAAf,CAAf;AAMA,YAAMb,OAAO,GAAGD,eAAe,CAAA,MAAA,EAAA,KAAA,EAAA,YAAA,EAA/B,gBAA+B,CAA/B;AAOA,aAAO;AACLoB,QAAAA,KAAK,EADA,KAAA;AAELvB,QAAAA,IAAI,EAFC,KAAA;AAGLK,QAAAA,GAAG,EAAA,OAAA,MAAA,CAASiB,MAHP,EAGF,CAHE;AAAA,QAAA,KAAA;AAAA,QAAA,UAAA;AAAA,QAAA,OAAA;AAOLhB,QAAAA;AAPK,OAAP;AAxBH,KAAA;;AAmCCkB,IAAAA,kBAAkB,CAAA,YAAA,EAAe;AAAA,MAAA,UAAA;AAAcP,MAAAA;AAAd,KAAf,EAA+C;AAAA,UAAA,cAAA,EAAA,QAAA;;AAC/D,UAAIJ,KAAK,GAAT,YAAA;;AAEA,UAAIA,KAAK,CAALA,KAAAA,KAAJ,KAAA,EAA2B;AACzB,eAAA,KAAA;AACD;;AAED,YAAMP,MAAM,GAAG,UAAU,CAAV,GAAA,CAAgBe,IAAD,IAAU;AACtC,cAAMZ,KAAK,GAAII,KAAD,CAAA,MAACA,CAAD,IAACA,CACZY,CAAD,IAAOA,CAAC,CAADA,IAAAA,KADT,IAAeZ,CAAf;AAIA,eAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAA,UAAA,IAAA;AAGER,UAAAA,GAAG,EACDI,KAAK,IAAIA,KAAK,CAALA,IAAAA,KAATA,IAAAA,IAAgCA,KAAK,CAArCA,GAAAA,GACIA,KAAK,CADTA,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAEea,MANnB,EAIIb,CAJJ;AAOEP,UAAAA,MAAM,EACJe,cAAc,CAAdA,IAAc,CAAdA,KAAAA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAESA,cAAc,CAFvBA,IAEuB,CAFvBA,CAAAA,EAGUR,KAAK,GAAGA,KAAK,CAAR,MAAA,GAHfQ,SAAAA,CAAAA,GAKIR,KAAK,GACLA,KAAK,CADA,MAAA,GAELiB;AAfR,SAAA,CAAA;AALF,OAAe,CAAf;AAwBA,YAAMR,KAAK,GAAGS,IAAI,CAAJA,GAAAA,CACZA,IAAI,CAAJA,GAAAA,CACE,OAAOd,KAAK,CAAZ,KAAA,KAAA,QAAA,GACIA,KAAK,CADT,KAAA,GAEIO,UAAU,CAAVA,OAAAA,CAAmBP,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAHzBc,IAGMP,CAHNO,EADYA,CACZA,CADYA,EAOZrB,MAAM,CAANA,MAAAA,GAPF,CAAcqB,CAAd;AAUA,UAAIvB,OAAO,GAAA,CAAA,cAAA,GAAGS,KAAK,CAAR,OAAA,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,cAAAA,CAAAA,MAAAA,CAAuBC,EAAD,IAClCR,MAAM,CAANA,IAAAA,CAAamB,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAAUX,EAAE,CADjC,GACER,CADYO,CAAd;;AAIA,UAAI,EAAA,CAAA,QAAA,GAAA,OAAA,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACT,QAAAA,CAAL,MAAI,CAAJ,EAAsB;AACpBA,QAAAA,OAAO,GAAGD,eAAe,CAAA,MAAA,EAAA,KAAA,EAAA,YAAA,EAAzBC,gBAAyB,CAAzBA;AAMD;;AAED,aAAO;AACLmB,QAAAA,KAAK,EADA,KAAA;AAELvB,QAAAA,IAAI,EAFC,KAAA;AAGLK,QAAAA,GAAG,EAAA,OAAA,MAAA,CAASiB,MAHP,EAGF,CAHE;AAAA,QAAA,KAAA;AAAA,QAAA,UAAA;AAAA,QAAA,OAAA;AAOLhB,QAAAA;AAPK,OAAP;AAzFH,KAAA;;AAoGCsB,IAAAA,2BAA2B,CAAA,KAAA,EAAQ;AAAA,MAAA,UAAA;AAAcX,MAAAA;AAAd,KAAR,EAAwC;AACjE,YAAMX,MAAM,GAAG,UAAU,CAAV,GAAA,CACZe,IAAD,IACER,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAmBY,CAAD,IAAOA,CAAC,CAADA,IAAAA,KAAzBZ,IAAAA,KAA6C;AAAA,QAAA,IAAA;AAE3CR,QAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CAAaiB,MAF2B,EAExC,CAFwC;AAG3CpB,QAAAA,MAAM,EAAEe,cAAc,CAAA,IAAA;AAHqB,OAFlC,CAAf;AASA,YAAMC,KAAK,GAAGS,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAEZP,UAAU,CAAVA,OAAAA,CAAmBP,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAFrB,IAEEO,CAFYO,CAAd;AAKA,UAAIvB,OAAO,GAAGS,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAAsBC,EAAD,IACjCR,MAAM,CAANA,IAAAA,CAAamB,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAAUX,EAAE,CADjC,GACER,CADYO,CAAd;;AAIA,UAAI,CAACT,OAAO,CAAZ,MAAA,EAAqB;AACnBA,QAAAA,OAAO,GAAGD,eAAe,CAAA,MAAA,EAAA,KAAA,EAAA,YAAA,EAAzBC,gBAAyB,CAAzBA;AAMD;;AAED,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAA,QAAA,OAAA;AAAA,QAAA,UAAA;AAAA,QAAA,MAAA;AAKEc,QAAAA;AALF,OAAA,CAAA;AAhIH,KAAA;;AAyICW,IAAAA,qBAAqB,CAAA,KAAA,EAAA,GAAA,EAAa;AAChC,YAAMX,KAAK,GAAGL,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBY,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAA5C,GAAcZ,CAAd;;AAEA,UAAIK,KAAK,KAAK,CAAVA,CAAAA,IAAgBA,KAAK,KAAKL,KAAK,CAAnC,KAAA,EAA2C;AACzC,eAAA,KAAA;AACD;;AAED,aAAOH,WAAW,CAAA,KAAA,EAAA,KAAA,EAAA,YAAA,EAAlB,gBAAkB,CAAlB;AAhJH,KAAA;;AAmJCoB,IAAAA,iBAAiB,CAAA,KAAA,EAAA,MAAA,EAAgB;AAC/B,cAAQC,MAAM,CAAd,IAAA;AACE,aAAA,SAAA;AACA,aAAA,UAAA;AAAiB;AACf,gBAAIb,KAAK,GAAG,CAAZ,CAAA;;AAEA,gBAAIa,MAAM,CAANA,IAAAA,KAAAA,UAAAA,IAA8BA,MAAM,CAANA,OAAAA,CAAlC,GAAA,EAAsD;AACpDb,cAAAA,KAAK,GAAGL,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACLJ,KAAD,IAAWA,KAAK,CAALA,GAAAA,KAAcsB,MAAM,CAANA,OAAAA,CAD3Bb,GAAQL,CAARK;AADF,aAAA,MAIO;AACLA,cAAAA,KAAK,GAAGL,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACLJ,KAAD,IAAWA,KAAK,CAALA,IAAAA,KAAesB,MAAM,CAANA,OAAAA,CAD5Bb,IAAQL,CAARK;AAGD;;AAED,gBAAIA,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB,qBAAA,IAAA;AACD;;AAED,mBAAOR,WAAW,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAGdJ,cAAAA,MAAM,EACJyB,MAAM,CAANA,OAAAA,CAAAA,MAAAA,KAAAA,SAAAA,GACI,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,CAAA,KAAA,EAAA,CAAA,KACf,CAAC,KAAD,KAAA,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAGM7B,gBAAAA,MAAM,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACDO,KAAK,CADJ,MAAA,CAAA,EAEDsB,MAAM,CAANA,OAAAA,CAFC,MAAA;AAHZ,eAAA,CAAA,GAFNA,KACI,CADJA,GAYIlB,KAAK,CAACP;AAhBE,aAAA,CAAA,EAAA,KAAA,EAAA,YAAA,EAAlB,gBAAkB,CAAlB;AAsBD;;AAED,aAAA,SAAA;AAAgB;AACd,gBAAIO,KAAK,CAALA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAgC;AAC9B,qBAAA,IAAA;AACD;;AAED,kBAAMmB,WAAW,GAAGnB,KAAK,CAALA,OAAAA,CAAcA,KAAK,CAALA,OAAAA,CAAAA,MAAAA,GAAdA,CAAAA,EAApB,GAAA;AACA,kBAAMK,KAAK,GAAGL,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CACXJ,KAAD,IAAWA,KAAK,CAALA,GAAAA,KADb,WAAcI,CAAd;;AAIA,gBAAIK,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB,qBAAA,IAAA;AACD;;AAED,mBAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAEEd,cAAAA,OAAO,EAAES,KAAK,CAALA,OAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAuB,CAFlC,CAEWA,CAFX;AAGEK,cAAAA;AAHF,aAAA,CAAA;AAKD;;AAED;AACE,iBAAOe,UAAU,CAAVA,iBAAAA,CAAAA,KAAAA,EAAP,MAAOA,CAAP;AAjEJ;AApJH,KAAA;;AAyNCC,IAAAA,uBAAuB,CAAA,MAAA,EAAS;AAC9B,aAAOH,MAAM,CAANA,IAAAA,KAAP,UAAA;AA1NH,KAAA;;AA6NCI,IAAAA,cAAc,EAAErC;AA7NjB,GAAA,CAHD;;AAmOA,SAAA,MAAA;AACD","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState = Omit<NavigationState, 'history'> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: ParamList[RouteName] extends undefined | any\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (initialRouteIndex !== index) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<TabNavigationState>).routes.find(\n          (r) => r.name === name\n        );\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(\n          typeof state.index === 'number'\n            ? state.index\n            : routeNames.indexOf(state.routes[0].name),\n          0\n        ),\n        routes.length - 1\n      );\n\n      let history = state.history?.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history?.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter((it) =>\n        routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) =>\n                      i === index\n                        ? {\n                            ...route,\n                            params: {\n                              ...route.params,\n                              ...action.payload.params,\n                            },\n                          }\n                        : route\n                    )\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}