{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native'; // eslint-disable-next-line import/no-unresolved\n\nimport { Screen, screensEnabled } from 'react-native-screens';\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component {\n  render() {\n    // react-native-screens is buggy on web\n    if ((screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && Platform.OS !== 'web') {\n      const _this$props = this.props,\n            {\n        isVisible\n      } = _this$props,\n            rest = _objectWithoutProperties(_this$props, [\"isVisible\"]); // @ts-ignore\n\n\n      return /*#__PURE__*/React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0\n      }, rest));\n    }\n\n    const _this$props2 = this.props,\n          {\n      isVisible,\n      children,\n      style\n    } = _this$props2,\n          rest = _objectWithoutProperties(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [styles.container, Platform.OS === 'web' ? {\n        display: isVisible ? 'flex' : 'none'\n      } : null, style],\n      collapsable: false,\n      removeClippedSubviews: // On iOS, set removeClippedSubviews to true only when not focused\n      // This is an workaround for a bug where the clipped view never re-appears\n      Platform.OS === 'ios' ? !isVisible : true,\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), /*#__PURE__*/React.createElement(View, {\n      style: isVisible ? styles.attached : styles.detached\n    }, children));\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","React","render","Platform","isVisible","rest","style","styles","display","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,UAAA,EAAA,IAAA,QAAA,cAAA,C,CACA;;AACA,SAAA,MAAA,EAAA,cAAA,QAAA,sBAAA;AAQA,MAAMA,YAAY,GAAlB,KAAA,C,CAA4B;;AAE5B,eAAe,MAAA,mBAAA,SAAkCC,KAAK,CAAvC,SAAA,CAAyD;AACtEC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,EAAd,KAAsBC,QAAQ,CAARA,EAAAA,KAA1B,KAAA,EAAiD;AAC/C,YAAA,WAAA,GAA+B,KAA/B,KAAA;AAAA,YAAM;AAAEC,QAAAA;AAAF,UAAN,WAAA;AAAA,YAAsBC,IAAtB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAD+C,WAC/C,CAAA,CAAA,CAD+C,CAG/C;;;AACA,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,QAAA,MAAM,EAAED,SAAS,GAAA,CAAA,GAAO;AAAhC,OAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,UAAA,YAAA,GAAgD,KAAhD,KAAA;AAAA,UAAM;AAAA,MAAA,SAAA;AAAA,MAAA,QAAA;AAAuBE,MAAAA;AAAvB,QAAN,YAAA;AAAA,UAAuCD,IAAvC,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,WAAA,EAAA,UAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAE,CACLE,MAAM,CADD,SAAA,EAEL,QAAQ,CAAR,EAAA,KAAA,KAAA,GACI;AAAEC,QAAAA,OAAO,EAAEJ,SAAS,GAAA,MAAA,GAAY;AAAhC,OADJ,GAFK,IAAA,EADT,KACS,CADT;AAQE,MAAA,WAAW,EARb,KAAA;AASE,MAAA,qBAAqB,EACnB;AACA;AACAD,MAAAA,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GAZJ,IAAA;AAcE,MAAA,aAAa,EAAEC,SAAS,GAAA,MAAA,GAAY;AAdtC,KAAA,EAAA,IAAA,CAAA,EAAA,aAiBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEA,SAAS,GAAGG,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACE;AAAlD,KAAA,EAlBJ,QAkBI,CAjBF,CADF;AAuBD;;AAnCqE;AAsCxE,MAAMF,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERG,IAAAA,GAAG,EAAEd;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      // @ts-ignore\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}