{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\n\nexport default function useNavigationCache({\n  state,\n  getState,\n  navigation,\n  setOptions: _setOptions,\n  router,\n  emitter\n}) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(() => ({\n    current: {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, _setOptions, router, emitter]);\n\n  const actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit\n      } = navigation,\n            rest = _objectWithoutProperties(navigation, [\"emit\"]);\n\n      const dispatch = action => {\n        const payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? _objectSpread({\n          source: route.key\n        }, payload) : payload);\n      };\n\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        // @ts-ignore\n        acc[name] = (...args) => dispatch(actions[name](...args));\n\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch,\n        setOptions: options => _setOptions(o => _objectSpread(_objectSpread({}, o), {}, {\n          [route.key]: _objectSpread(_objectSpread({}, o[route.key]), options)\n        })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          } // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["setOptions","emitter","cache","current","actions","router","previous","route","acc","emit","rest","dispatch","action","payload","getState","navigation","source","key","helpers","options","o","isFocused","state"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport { NavigationEventEmitter } from './useEventEmitter';\n\nimport { NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-ignore\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}