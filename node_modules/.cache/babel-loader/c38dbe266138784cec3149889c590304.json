{"ast":null,"code":"import * as React from 'react';\nexport default function useThenable(create) {\n  const [promise] = React.useState(create); // Check if our thenable is synchronous\n\n  let resolved = false;\n  let value;\n  promise.then(result => {\n    resolved = true;\n    value = result;\n  });\n  const [state, setState] = React.useState([resolved, value]);\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":{"version":3,"sources":["useThenable.tsx"],"names":["React","resolved","promise","result","value","cancelled","resolve","setState"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,eAAe,SAAA,WAAA,CAAA,MAAA,EAAsD;AACnE,QAAM,CAAA,OAAA,IAAYA,KAAK,CAALA,QAAAA,CADiD,MACjDA,CAAlB,CADmE,CAGnE;;AACA,MAAIC,QAAQ,GAAZ,KAAA;AACA,MAAA,KAAA;AAEAC,EAAAA,OAAO,CAAPA,IAAAA,CAAcC,MAAD,IAAY;AACvBF,IAAAA,QAAQ,GAARA,IAAAA;AACAG,IAAAA,KAAK,GAALA,MAAAA;AAFFF,GAAAA;AAKA,QAAM,CAAA,KAAA,EAAA,QAAA,IAAoBF,KAAK,CAALA,QAAAA,CAAyC,CAAA,QAAA,EAAnE,KAAmE,CAAzCA,CAA1B;AAKAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAIK,SAAS,GAAb,KAAA;;AAEA,UAAMC,OAAO,GAAG,YAAY;AAC1B,UAAA,MAAA;;AAEA,UAAI;AACFH,QAAAA,MAAM,GAAG,MAATA,OAAAA;AADF,OAAA,SAEU;AACR,YAAI,CAAJ,SAAA,EAAgB;AACdI,UAAAA,QAAQ,CAAC,CAAA,IAAA,EAATA,MAAS,CAAD,CAARA;AACD;AACF;AATH,KAAA;;AAYA,QAAI,CAAJ,QAAA,EAAe;AACbD,MAAAA,OAAO;AACR;;AAED,WAAO,MAAM;AACXD,MAAAA,SAAS,GAATA,IAAAA;AADF,KAAA;AAnBFL,GAAAA,EAsBG,CAAA,OAAA,EAtBHA,QAsBG,CAtBHA;AAwBA,SAAA,KAAA;AACD","sourcesContent":["import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  // Check if our thenable is synchronous\n  let resolved = false;\n  let value: T | undefined;\n\n  promise.then((result) => {\n    resolved = true;\n    value = result;\n  });\n\n  const [state, setState] = React.useState<[boolean, T | undefined]>([\n    resolved,\n    value,\n  ]);\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}