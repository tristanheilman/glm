{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TextInput, Platform, Keyboard } from 'react-native';\nexport default class KeyboardManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"previouslyFocusedTextInput\", null);\n\n    _defineProperty(this, \"startTimestamp\", 0);\n\n    _defineProperty(this, \"keyboardTimeout\", void 0);\n\n    _defineProperty(this, \"clearKeyboardTimeout\", () => {\n      if (this.keyboardTimeout !== undefined) {\n        clearTimeout(this.keyboardTimeout);\n        this.keyboardTimeout = undefined;\n      }\n    });\n\n    _defineProperty(this, \"handlePageChangeStart\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n\n      this.clearKeyboardTimeout();\n      const input = TextInput.State.currentlyFocusedField(); // When a page change begins, blur the currently focused input\n\n      TextInput.State.blurTextInput(input); // Store the id of this input so we can refocus it if change was cancelled\n\n      this.previouslyFocusedTextInput = input; // Store timestamp for touch start\n\n      this.startTimestamp = Date.now();\n    });\n\n    _defineProperty(this, \"handlePageChangeConfirm\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n\n      this.clearKeyboardTimeout();\n      const input = this.previouslyFocusedTextInput;\n\n      if (Platform.OS === 'android') {\n        Keyboard.dismiss();\n      } else if (input) {\n        TextInput.State.blurTextInput(input);\n      } // Cleanup the ID on successful page change\n\n\n      this.previouslyFocusedTextInput = null;\n    });\n\n    _defineProperty(this, \"handlePageChangeCancel\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n\n      this.clearKeyboardTimeout(); // The page didn't change, we should restore the focus of text input\n\n      const input = this.previouslyFocusedTextInput;\n\n      if (input) {\n        // If the interaction was super short we should make sure keyboard won't hide again.\n        // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n        // During first ~100ms keyboard will be dismissed no matter what,\n        // so we have to make sure it won't interrupt input refocus logic.\n        // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n        // Subtracting timestamps makes us sure the delay is executed only when needed.\n        if (Date.now() - this.startTimestamp < 100) {\n          this.keyboardTimeout = setTimeout(() => {\n            TextInput.State.focusTextInput(input);\n            this.previouslyFocusedTextInput = null;\n          }, 100);\n        } else {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  } // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel\n    });\n  }\n\n}","map":{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","componentWillUnmount","clearTimeout","input","TextInput","Date","Platform","Keyboard","setTimeout","render","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextInput, Platform, Keyboard } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: () => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    const input = TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    const input = this.previouslyFocusedTextInput;\n\n    if (Platform.OS === 'android') {\n      Keyboard.dismiss();\n    } else if (input) {\n      TextInput.State.blurTextInput(input);\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = null;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = null;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}