{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { BaseNavigationContainer } from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useBackButton from './useBackButton';\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\nconst NavigationContainer = React.forwardRef(function NavigationContainer(_ref, ref) {\n  let {\n    theme = DefaultTheme,\n    linking,\n    fallback = null\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"theme\", \"linking\", \"fallback\"]);\n\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n  const refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  const {\n    getInitialState\n  } = useLinking(refContainer, _objectSpread({\n    enabled: isLinkingEnabled,\n    prefixes: []\n  }, linking));\n  const [isReady, initialState] = useThenable(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n\n  if (rest.initialState == null && isLinkingEnabled && !isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n\n  return /*#__PURE__*/React.createElement(LinkingContext.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n});\nexport default NavigationContainer;","map":{"version":3,"sources":["NavigationContainer.tsx"],"names":["NavigationContainer","theme","fallback","rest","isLinkingEnabled","linking","refContainer","React","useBackButton","getInitialState","useLinking","enabled","prefixes","useThenable","linkingContext","options"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,uBAAA,QAAA,wBAAA;AAKA,OAAA,aAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,wBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AASA;;;;;;;;;;;;;AAYA,MAAMA,mBAAmB,GAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,mBAAA,CAAA,IAAA,EAAA,GAAA,EAG3C;AAAA,MAFA;AAAEC,IAAAA,KAAK,GAAP,YAAA;AAAA,IAAA,OAAA;AAAiCC,IAAAA,QAAQ,GAAG;AAA5C,MAEA,IAAA;AAAA,MAFqDC,IAErD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AACA,QAAMC,gBAAgB,GAAGC,OAAO,GAAGA,OAAO,CAAPA,OAAAA,KAAH,KAAA,GAAhC,KAAA;AAEA,QAAMC,YAAY,GAAGC,KAAK,CAALA,MAAAA,CAArB,IAAqBA,CAArB;AAEAC,EAAAA,aAAa,CAAbA,YAAa,CAAbA;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAsBC,UAAU,CAAA,YAAA,EAAA,aAAA,CAAA;AACpCC,IAAAA,OAAO,EAD6B,gBAAA;AAEpCC,IAAAA,QAAQ,EAAE;AAF0B,GAAA,EAAtC,OAAsC,CAAA,CAAtC;AAMA,QAAM,CAAA,OAAA,EAAA,YAAA,IAA0BC,WAAW,CAA3C,eAA2C,CAA3C;AAEAN,EAAAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,EAA+B,MAAMD,YAAY,CAAjDC,OAAAA;AAEA,QAAMO,cAAc,GAAG,KAAK,CAAL,OAAA,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAEV;AAAX,GAAP,CAAd,EAA4C,CAAnE,OAAmE,CAA5C,CAAvB;;AAEA,MAAIF,IAAI,CAAJA,YAAAA,IAAAA,IAAAA,IAAAA,gBAAAA,IAAiD,CAArD,OAAA,EAA+D;AAC7D;AACA;AACA,WAAA,QAAA;AACD;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,cAAD,CAAA,QAAA,EAAA;AAAyB,IAAA,KAAK,EAAEW;AAAhC,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAAEb;AAAtB,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,YAAY,EACVE,IAAI,CAAJA,YAAAA,IAAAA,IAAAA,GAAAA,YAAAA,GAA2CA,IAAI,CAHnD,YAAA;AAKE,IAAA,GAAG,EAAEG;AALP,GAAA,CAAA,CADF,CADF,CADF;AA5BF,CAA4B,CAA5B;AA2CA,eAAA,mBAAA","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useBackButton from './useBackButton';\nimport { Theme, LinkingOptions } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions;\n  fallback?: React.ReactNode;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  { theme = DefaultTheme, linking, fallback = null, ...rest }: Props,\n  ref?: React.Ref<NavigationContainerRef | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  const [isReady, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  if (rest.initialState == null && isLinkingEnabled && !isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n});\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"module"}