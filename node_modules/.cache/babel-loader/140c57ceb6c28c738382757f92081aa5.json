{"ast":null,"code":"import * as React from 'react';\nexport default function useDevTools({\n  name,\n  reset,\n  state,\n  enabled\n}) {\n  const devToolsRef = React.useRef();\n\n  if (enabled && process.env.NODE_ENV !== 'production' && global.__REDUX_DEVTOOLS_EXTENSION__ && devToolsRef.current === undefined) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({\n      name\n    });\n  }\n\n  const devTools = devToolsRef.current;\n  const lastStateRef = React.useRef(state);\n  const actions = React.useRef([]);\n  React.useEffect(() => {\n    devTools === null || devTools === void 0 ? void 0 : devTools.init(lastStateRef.current);\n  }, [devTools]);\n  React.useEffect(() => devTools === null || devTools === void 0 ? void 0 : devTools.subscribe(message => {\n    if (message.type === 'DISPATCH' && message.state) {\n      reset(JSON.parse(message.state));\n    }\n  }), [devTools, reset]);\n  const trackState = React.useCallback(getState => {\n    if (!devTools) {\n      return;\n    }\n\n    while (actions.current.length > 1) {\n      devTools.send(actions.current.shift(), lastStateRef.current);\n    }\n\n    const state = getState();\n\n    if (actions.current.length) {\n      devTools.send(actions.current.pop(), state);\n    } else {\n      devTools.send('@@UNKNOWN', state);\n    }\n\n    lastStateRef.current = state;\n  }, [devTools]);\n  const trackAction = React.useCallback(action => {\n    if (!devTools) {\n      return;\n    }\n\n    actions.current.push(action);\n  }, [devTools]);\n  return {\n    trackAction,\n    trackState\n  };\n}","map":{"version":3,"sources":["useDevTools.tsx"],"names":["enabled","devToolsRef","React","process","global","name","devTools","lastStateRef","actions","message","reset","JSON","trackState","getState","state","trackAction","action"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAsCA,eAAe,SAAA,WAAA,CAAqB;AAAA,EAAA,IAAA;AAAA,EAAA,KAAA;AAAA,EAAA,KAAA;AAAsBA,EAAAA;AAAtB,CAArB,EAA+D;AAC5E,QAAMC,WAAW,GAAGC,KAAK,CAAzB,MAAoBA,EAApB;;AAEA,MACEF,OAAO,IACPG,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KADAH,YAAAA,IAEAI,MAAM,CAFNJ,4BAAAA,IAGAC,WAAW,CAAXA,OAAAA,KAJF,SAAA,EAKE;AACAA,IAAAA,WAAW,CAAXA,OAAAA,GAAsB,MAAM,CAAN,4BAAA,CAAA,OAAA,CAA4C;AAAEI,MAAAA;AAAF,KAA5C,CAAtBJ;AACD;;AAED,QAAMK,QAAQ,GAAGL,WAAW,CAA5B,OAAA;AACA,QAAMM,YAAY,GAAGL,KAAK,CAALA,MAAAA,CAArB,KAAqBA,CAArB;AACA,QAAMM,OAAO,GAAGN,KAAK,CAALA,MAAAA,CAAhB,EAAgBA,CAAhB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpBI,IAAAA,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,KAAA,KAARA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAARA,IAAAA,CAAeC,YAAY,CAA3BD,OAAAA,CAAAA;AADFJ,GAAAA,EAEG,CAFHA,QAEG,CAFHA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CACE,MACE,QADF,KAAA,IACE,IAAA,QADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,QAAQ,CAAR,SAAA,CAAqBO,OAAD,IAAa;AAC/B,QAAIA,OAAO,CAAPA,IAAAA,KAAAA,UAAAA,IAA+BA,OAAO,CAA1C,KAAA,EAAkD;AAChDC,MAAAA,KAAK,CAACC,IAAI,CAAJA,KAAAA,CAAWF,OAAO,CAAxBC,KAAMC,CAAD,CAALD;AACD;AALPR,GAEI,CAFJA,EAOE,CAAA,QAAA,EAPFA,KAOE,CAPFA;AAUA,QAAMU,UAAU,GAAG,KAAK,CAAL,WAAA,CAChBC,QAAD,IAA2B;AACzB,QAAI,CAAJ,QAAA,EAAe;AACb;AACD;;AAED,WAAOL,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,GAAP,CAAA,EAAmC;AACjCF,MAAAA,QAAQ,CAARA,IAAAA,CAAcE,OAAO,CAAPA,OAAAA,CAAdF,KAAcE,EAAdF,EAAuCC,YAAY,CAAnDD,OAAAA;AACD;;AAED,UAAMQ,KAAK,GAAGD,QAAd,EAAA;;AAEA,QAAIL,OAAO,CAAPA,OAAAA,CAAJ,MAAA,EAA4B;AAC1BF,MAAAA,QAAQ,CAARA,IAAAA,CAAcE,OAAO,CAAPA,OAAAA,CAAdF,GAAcE,EAAdF,EAAAA,KAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,EAAAA,KAAAA;AACD;;AAEDC,IAAAA,YAAY,CAAZA,OAAAA,GAAAA,KAAAA;AAlBe,GAAA,EAoBjB,CApBF,QAoBE,CApBiB,CAAnB;AAuBA,QAAMQ,WAAW,GAAG,KAAK,CAAL,WAAA,CACjBC,MAAD,IAAuC;AACrC,QAAI,CAAJ,QAAA,EAAe;AACb;AACD;;AAEDR,IAAAA,OAAO,CAAPA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AANgB,GAAA,EAQlB,CARF,QAQE,CARkB,CAApB;AAWA,SAAO;AAAA,IAAA,WAAA;AAELI,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  NavigationAction,\n  PartialState,\n} from '@react-navigation/routers';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\ntype Options = {\n  enabled: boolean;\n  name: string;\n  reset: (state: NavigationState) => void;\n  state: State;\n};\n\ntype DevTools = {\n  init(value: any): void;\n  send(action: any, value: any): void;\n  subscribe(\n    listener: (message: { type: string; [key: string]: any }) => void\n  ): () => void;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __REDUX_DEVTOOLS_EXTENSION__:\n        | {\n            connect(options: { name: string }): DevTools;\n            disconnect(): void;\n          }\n        | undefined;\n    }\n  }\n}\n\nexport default function useDevTools({ name, reset, state, enabled }: Options) {\n  const devToolsRef = React.useRef<DevTools>();\n\n  if (\n    enabled &&\n    process.env.NODE_ENV !== 'production' &&\n    global.__REDUX_DEVTOOLS_EXTENSION__ &&\n    devToolsRef.current === undefined\n  ) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({ name });\n  }\n\n  const devTools = devToolsRef.current;\n  const lastStateRef = React.useRef<State>(state);\n  const actions = React.useRef<(NavigationAction | string)[]>([]);\n\n  React.useEffect(() => {\n    devTools?.init(lastStateRef.current);\n  }, [devTools]);\n\n  React.useEffect(\n    () =>\n      devTools?.subscribe((message) => {\n        if (message.type === 'DISPATCH' && message.state) {\n          reset(JSON.parse(message.state));\n        }\n      }),\n    [devTools, reset]\n  );\n\n  const trackState = React.useCallback(\n    (getState: () => State) => {\n      if (!devTools) {\n        return;\n      }\n\n      while (actions.current.length > 1) {\n        devTools.send(actions.current.shift(), lastStateRef.current);\n      }\n\n      const state = getState();\n\n      if (actions.current.length) {\n        devTools.send(actions.current.pop(), state);\n      } else {\n        devTools.send('@@UNKNOWN', state);\n      }\n\n      lastStateRef.current = state;\n    },\n    [devTools]\n  );\n\n  const trackAction = React.useCallback(\n    (action: NavigationAction | string) => {\n      if (!devTools) {\n        return;\n      }\n\n      actions.current.push(action);\n    },\n    [devTools]\n  );\n\n  return {\n    trackAction,\n    trackState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}