{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\n\nfunction StackNavigator(_ref) {\n  let {\n    initialRouteName,\n    children,\n    screenOptions\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web'\n  };\n  const {\n    state,\n    descriptors,\n    navigation\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions: typeof screenOptions === 'function' ? (...args) => _objectSpread(_objectSpread({}, defaultOptions), screenOptions(...args)) : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  });\n  React.useEffect(() => navigation.addListener && navigation.addListener('tabPress', e => {\n    const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n    // This is necessary to know if preventDefault() has been called\n\n    requestAnimationFrame(() => {\n      if (state.index > 0 && isFocused && !e.defaultPrevented) {\n        // When user taps on already focused tab and we're inside the tab,\n        // reset the stack to replicate native behaviour\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n          target: state.key\n        }));\n      }\n    });\n  }), [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["screenOptions","rest","defaultOptions","gestureEnabled","Platform","animationEnabled","navigation","useNavigationBuilder","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,cAAA;AACA,SAAA,oBAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,YAAA,QAAA,0BAAA;AAUA,OAAA,SAAA,MAAA,0BAAA;;AAWA,SAAA,cAAA,CAAA,IAAA,EAKU;AAAA,MALc;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAGtBA,IAAAA;AAHsB,MAKd,IAAA;AAAA,MADLC,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,EAAA,UAAA,EAAA,eAAA,CAAA,CAAA;;AACR,QAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KADK,KAAA;AAErBC,IAAAA,gBAAgB,EAAED,QAAQ,CAARA,EAAAA,KAAgB;AAFb,GAAvB;AAKA,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAAsBE,IAAAA;AAAtB,MAAqCC,oBAAoB,CAAA,WAAA,EAKhD;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAGbP,IAAAA,aAAa,EACX,OAAA,aAAA,KAAA,UAAA,GACI,CAAC,GAAD,IAAA,KAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAEKA,aAAa,CAAC,GAHvB,IAGsB,CAFlB,CADJ,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,cAAA,CAAA,EAAA,aAAA;AAJW,GALgD,CAA/D;AAoBAQ,EAAAA,KAAK,CAALA,SAAAA,CACE,MACEF,UAAU,CAAVA,WAAAA,IACA,UAAU,CAAV,WAAA,CAAA,UAAA,EAAoCG,CAAD,IAAO;AACxC,UAAMC,SAAS,GAAGJ,UAAU,CADY,SACtBA,EAAlB,CADwC,CAGxC;AACA;;AACAK,IAAAA,qBAAqB,CAAC,MAAM;AAC1B,UACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AACA;AACA;AACAH,QAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKO,YAAY,CADjBP,QACKO,EADLP,CAAAA,EAAAA,EAAAA,EAAAA;AAEEQ,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBT,SAAAA,CAAAA;AAID;AAZHK,KAAqB,CAArBA;AARNH,GAGI,CAHJA,EAuBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAvBjCJ,GAuBE,CAvBFA;AA0BA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEF;AAJd,GAAA,CAAA,CADF;AAQD;;AAED,eAAeU,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}