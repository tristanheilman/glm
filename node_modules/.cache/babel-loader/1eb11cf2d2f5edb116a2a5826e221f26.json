{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport queryString from 'query-string';\n\nconst getActiveRoute = state => {\n  const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     Chat: {\n *       path: 'chat/:author/:id',\n *       stringify: { author: author => author.toLowerCase() }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\n\n\nexport default function getPathFromState(state, options = {}) {\n  if (state === undefined) {\n    throw Error('NavigationState not passed');\n  } // Create a normalized configs array which will be easier to use\n\n\n  const configs = createNormalizedConfigs(options);\n  let path = '/';\n  let current = state;\n  const allParams = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index];\n    let pattern;\n    let focusedParams;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs; // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n\n    let nestedRouteNames = [];\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        var _currentOptions$route;\n\n        const stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n        const currentParams = fromEntries(Object.entries(route.params).map(([key, value]) => [key, (stringify === null || stringify === void 0 ? void 0 : stringify[key]) ? stringify[key](value) : String(value)]));\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          var _pattern; // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n\n\n          focusedParams = _objectSpread({}, currentParams);\n          (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(p => p.startsWith(':')) // eslint-disable-next-line no-loop-func\n          .forEach(p => {\n            const name = getParamName(p); // Remove the params present in the pattern since we'll only use the rest for query string\n\n            if (focusedParams) {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[name];\n            }\n          });\n        }\n      } // If there is no `screens` property or no nested state, we return pattern\n\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens; // if there is config for next route name, we go deeper\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(p => {\n        const name = getParamName(p); // We don't know what to show for wildcard patterns\n        // Showing the route name seems ok, though whatever we show here will be incorrect\n        // Since the page doesn't actually exist\n\n        if (p === '*') {\n          return route.name;\n        } // If the path has a pattern for a param, put the param in the path\n\n\n        if (p.startsWith(':')) {\n          const value = allParams[name];\n\n          if (value === undefined && p.endsWith('?')) {\n            // Optional params without value assigned in route.params should be ignored\n            return '';\n          }\n\n          return encodeURIComponent(value);\n        }\n\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += \"?\".concat(query);\n      }\n    }\n\n    current = route.state;\n  } // Remove multiple as well as trailing slashes\n\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n} // Object.fromEntries is not available in older iOS versions\n\nconst fromEntries = entries => entries.reduce((acc, [k, v]) => {\n  acc[k] = v;\n  return acc;\n}, {});\n\nconst getParamName = pattern => pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n\nconst createConfigItem = (config, parentPattern) => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern\n    };\n  } // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n\n\n  const pattern = config.exact !== true && parentPattern && config.path ? joinPaths(parentPattern, config.path) : config.path;\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern === null || pattern === void 0 ? void 0 : pattern.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens\n  };\n};\n\nconst createNormalizedConfigs = (options, pattern) => fromEntries(Object.entries(options).map(([name, c]) => {\n  const result = createConfigItem(c, pattern);\n  return [name, result];\n}));","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["getActiveRoute","state","route","options","Error","configs","createNormalizedConfigs","path","current","allParams","index","focusedRoute","currentOptions","nestedRouteNames","hasNext","pattern","stringify","currentParams","fromEntries","Object","String","focusedParams","p","name","getParamName","nextRoute","nestedConfig","value","encodeURIComponent","query","queryString","entries","acc","joinPaths","paths","createConfigItem","parentPattern","config","screens","result"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport { PathConfig } from './types';\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype OptionsItem = PathConfig[string];\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     Chat: {\n *       path: 'chat/:author/:id',\n *       stringify: { author: author => author.toLowerCase() }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state?: State,\n  options: PathConfig = {}\n): string {\n  if (state === undefined) {\n    throw Error('NavigationState not passed');\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = createNormalizedConfigs(options);\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\n// Object.fromEntries is not available in older iOS versions\nconst fromEntries = <K extends string, V>(entries: (readonly [K, V])[]) =>\n  entries.reduce((acc, [k, v]) => {\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: OptionsItem | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true && parentPattern && config.path\n      ? joinPaths(parentPattern, config.path)\n      : config.path;\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfig,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module"}