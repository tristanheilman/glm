{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n});\n\nconst isDrawerOpen = state => {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.find(it => it.type === 'drawer'));\n};\n\nconst openDrawer = state => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [...state.history, {\n      type: 'drawer'\n    }]\n  });\n};\n\nconst closeDrawer = state => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(it => it.type !== 'drawer')\n  });\n};\n\nexport default function DrawerRouter(_ref) {\n  let {\n    openByDefault\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"openByDefault\"]);\n\n  const router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","openByDefault","rest","router","TabRouter","getInitialState","routeParamList","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find((it) => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      let state = router.getInitialState({ routeNames, routeParamList });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}