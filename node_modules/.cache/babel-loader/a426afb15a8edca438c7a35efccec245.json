{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\n\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map((r, i) => i === index ? _objectSpread(_objectSpread({}, r), {}, {\n              params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n            }) : r)\n          });\n        }\n\n      case 'RESET':\n        {\n          const nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(route => route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                key: \"\".concat(route.name, \"-\").concat(nanoid())\n              }))\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n\n};\nexport default BaseRouter;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","action","index","state","r","routes","params","nextState","route","name","key","nanoid","shouldActionChangeFocus"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,QAAA,mBAAA;AAGA;;;;;AAIA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,CAAA,KAAA,EAAA,MAAA,EAGqB;AACpC,YAAQC,MAAM,CAAd,IAAA;AACE,WAAA,YAAA;AAAmB;AACjB,gBAAMC,KAAK,GAAGD,MAAM,CAANA,MAAAA,GACVE,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBC,CAAD,IAAOA,CAAC,CAADA,GAAAA,KAAUH,MAAM,CADpCA,MACVE,CADUF,GAEVE,KAAK,CAFT,KAAA;;AAIA,cAAID,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB,mBAAA,IAAA;AACD;;AAED,iBAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAEEG,YAAAA,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,KACvB,CAAC,KAAD,KAAA,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA;AACYC,cAAAA,MAAM,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAOF,CAAC,CAAR,MAAA,CAAA,EAAoBH,MAAM,CAANA,OAAAA,CAApB,MAAA;AADlB,aAAA,CAAA,GADM,CAAA;AAFV,WAAA,CAAA;AAQD;;AAED,WAAA,OAAA;AAAc;AACZ,gBAAMM,SAAS,GAAGN,MAAM,CAAxB,OAAA;;AAEA,cACEM,SAAS,CAATA,MAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IACAA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CACGC,KAAD,IAA6B,CAACL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BK,KAAK,CAHjE,IAGkCL,CADhCI,CAFF,EAKE;AACA,mBAAA,IAAA;AACD;;AAED,cAAIA,SAAS,CAATA,KAAAA,KAAJ,KAAA,EAA+B;AAC7B,gBACEJ,KAAK,CAALA,UAAAA,CAAAA,MAAAA,KAA4BI,SAAS,CAATA,UAAAA,CAA5BJ,MAAAA,IACAI,SAAS,CAATA,UAAAA,CAAAA,IAAAA,CACGE,IAAD,IAAU,CAACN,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAHf,IAGeA,CADbI,CAFF,EAKE;AACA,qBAAA,IAAA;AACD;;AAED,mBAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,EAAA,EAAA;AAEEF,cAAAA,MAAM,EAAE,SAAS,CAAT,MAAA,CAAA,GAAA,CAAsBG,KAAD,IAC3B,KAAK,CAAL,GAAA,GAAA,KAAA,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAgCE,gBAAAA,GAAG,EAAA,GAAA,MAAA,CAAKF,KAAK,CAAV,IAAA,EAAA,GAAA,EAAA,MAAA,CAAmBG,MAAnB,EAAA;AAAnC,eAAA,CADM;AAFV,aAAA,CAAA;AAMD;;AAED,iBAAA,SAAA;AACD;;AAED;AACE,eAAA,IAAA;AAtDJ;AALe,GAAA;;AA+DjBC,EAAAA,uBAAuB,CAAA,MAAA,EAAiC;AACtD,WAAOX,MAAM,CAANA,IAAAA,KAAP,UAAA;AACD;;AAjEgB,CAAnB;AAoEA,eAAA,UAAA","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport { CommonNavigationAction, NavigationState, PartialState } from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}