{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nexport default React.memo(function Header(props) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator\n  } = props;\n  const {\n    options\n  } = scene.descriptor;\n  const title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.name;\n  let leftLabel; // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.name;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  const goBack = React.useCallback(debounce(() => {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n        source: scene.route.key\n      }));\n    }\n  }, 50), [navigation, scene.route.key]);\n  return /*#__PURE__*/React.createElement(HeaderSegment, _extends({}, options, {\n    insets: insets,\n    layout: layout,\n    scene: scene,\n    title: title,\n    leftLabel: leftLabel,\n    headerTitle: typeof options.headerTitle !== 'function' ? props => /*#__PURE__*/React.createElement(HeaderTitle, props) : options.headerTitle,\n    onGoBack: previous ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});","map":{"version":3,"sources":["Header.tsx"],"names":["styleInterpolator","options","scene","title","leftLabel","o","previous","goBack","debounce","navigation","StackActions","source","key","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,YAAA,QAAA,0BAAA;AAEA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AAGA,eAAe,KAAK,CAAL,IAAA,CAAW,SAAA,MAAA,CAAA,KAAA,EAAyC;AACjE,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,QAAA;AAAA,IAAA,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,UAAA;AAMJA,IAAAA;AANI,MAAN,KAAA;AAQA,QAAM;AAAEC,IAAAA;AAAF,MAAcC,KAAK,CAAzB,UAAA;AACA,QAAMC,KAAK,GACT,OAAOF,OAAO,CAAd,WAAA,KAAA,UAAA,IACAA,OAAO,CAAPA,WAAAA,KADA,SAAA,GAEIA,OAAO,CAFX,WAAA,GAGIA,OAAO,CAAPA,KAAAA,KAAAA,SAAAA,GACAA,OAAO,CADPA,KAAAA,GAEAC,KAAK,CAALA,KAAAA,CANN,IAAA;AAQA,MAlBiE,SAkBjE,CAlBiE,CAoBjE;AACA;;AACA,MAAID,OAAO,CAAPA,eAAAA,KAAJ,SAAA,EAA2C;AACzCG,IAAAA,SAAS,GAAGH,OAAO,CAAnBG,eAAAA;AADF,GAAA,MAEO,IAAA,QAAA,EAAc;AACnB,UAAMC,CAAC,GAAGC,QAAQ,CAARA,UAAAA,CAAV,OAAA;AAEAF,IAAAA,SAAS,GACP,OAAOC,CAAC,CAAR,WAAA,KAAA,UAAA,IAAuCA,CAAC,CAADA,WAAAA,KAAvC,SAAA,GACIA,CAAC,CADL,WAAA,GAEIA,CAAC,CAADA,KAAAA,KAAAA,SAAAA,GACAA,CAAC,CADDA,KAAAA,GAEAC,QAAQ,CAARA,KAAAA,CALNF,IAAAA;AA3B+D,GAAA,CAmCjE;;;AACA,QAAMG,MAAM,GAAG,KAAK,CAAL,WAAA,CACbC,QAAQ,CAAC,MAAM;AACb,QAAIC,UAAU,CAAVA,SAAAA,MAA0BA,UAAU,CAAxC,SAA8BA,EAA9B,EAAsD;AACpDA,MAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKC,YAAY,CADjBD,GACKC,EADLD,CAAAA,EAAAA,EAAAA,EAAAA;AAEEE,QAAAA,MAAM,EAAET,KAAK,CAALA,KAAAA,CAAYU;AAFtBH,OAAAA,CAAAA;AAID;AANK,GAAA,EADK,EACL,CADK,EASb,CAAA,UAAA,EAAaP,KAAK,CAALA,KAAAA,CATf,GASE,CATa,CAAf;AAYA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEE,IAAA,MAAM,EAFR,MAAA;AAGE,IAAA,MAAM,EAHR,MAAA;AAIE,IAAA,KAAK,EAJP,KAAA;AAKE,IAAA,KAAK,EALP,KAAA;AAME,IAAA,SAAS,EANX,SAAA;AAOE,IAAA,WAAW,EACT,OAAOD,OAAO,CAAd,WAAA,KAAA,UAAA,GACKY,KAAD,IAAA,aAAkC,KAAA,CAAA,aAAA,CAAA,WAAA,EADtC,KACsC,CADtC,GAEIZ,OAAO,CAVf,WAAA;AAYE,IAAA,QAAQ,EAAEK,QAAQ,GAAA,MAAA,GAZpB,SAAA;AAaE,IAAA,iBAAiB,EAAEN;AAbrB,GAAA,CAAA,CADF;AAhDF,CAAe,CAAf","sourcesContent":["import * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\n\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.name;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.name;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: scene.route.key,\n        });\n      }\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}