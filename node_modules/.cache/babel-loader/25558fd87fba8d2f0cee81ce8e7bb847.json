{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet, Dimensions, Platform } from 'react-native';\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport CardContainer from './CardContainer';\nimport { DefaultTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nconst EPSILON = 0.01;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nconst getHeaderHeights = (routes, insets, descriptors, layout, previous) => {\n  return routes.reduce((acc, curr) => {\n    const {\n      options = {}\n    } = descriptors[curr.key] || {};\n    const style = StyleSheet.flatten(options.headerStyle || {});\n    const height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    const {\n      headerStatusBarHeight = safeAreaInsets.top\n    } = options;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (mode, layout, descriptor) => {\n  const {\n    gestureDirection = mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (mode, gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions(mode, {\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n        const oldScene = state.scenes[index];\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n            next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every((it, i) => {\n          // @ts-ignore\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, state.layout, state.headerHeights)\n    };\n  }\n\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleHeaderLayout\", ({\n      route,\n      height\n    }) => {\n      this.setState(({\n        headerHeights\n      }) => {\n        const previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, {\n            [route.key]: height\n          })\n        };\n      });\n    });\n\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n\n    const {\n      height: _height = 0,\n      width: _width = 0\n    } = Dimensions.get('window');\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    let defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n        headerStyleInterpolator: forNoAnimationHeader\n      });\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left\n    } = focusedOptions.safeAreaInsets || {}; // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n    return /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => {\n      const isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(scene => {\n        const {\n          descriptor\n        } = scene;\n        const options = descriptor ? descriptor.options : {};\n        const {\n          headerTransparent,\n          headerShown = isParentHeaderShown === false\n        } = options;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      const floatingHeader = headerMode === 'float' ? /*#__PURE__*/React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout,\n        insets: {\n          top,\n          right,\n          bottom,\n          left\n        },\n        scenes,\n        getPreviousRoute,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && styles.absolute]\n      })) : null;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map((route, index, self) => {\n        const focused = focusedRoute.key === route.key;\n        const gesture = gestures[route.key];\n        const scene = scenes[index];\n        const isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n        const {\n          safeAreaInsets,\n          headerShown = isParentHeaderShown === false,\n          headerTransparent,\n          cardShadowEnabled,\n          cardOverlayEnabled,\n          cardOverlay,\n          cardStyle,\n          animationEnabled,\n          gestureResponseDistance,\n          gestureVelocityImpact,\n          gestureDirection = defaultTransitionPreset.gestureDirection,\n          transitionSpec = defaultTransitionPreset.transitionSpec,\n          cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n          headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n        } = scene.descriptor ? scene.descriptor.options : {};\n        let transitionConfig = {\n          gestureDirection,\n          transitionSpec,\n          cardStyleInterpolator,\n          headerStyleInterpolator\n        }; // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but majority of the transitions look alright\n\n        if (index !== self.length - 1) {\n          const nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            const {\n              animationEnabled,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n            } = nextScene.descriptor ? nextScene.descriptor.options : {};\n            transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator\n            };\n          }\n        }\n\n        const {\n          top: safeAreaInsetTop = insets.top,\n          right: safeAreaInsetRight = insets.right,\n          bottom: safeAreaInsetBottom = insets.bottom,\n          left: safeAreaInsetLeft = insets.left\n        } = safeAreaInsets || {};\n        const previousRoute = getPreviousRoute({\n          route: scene.route\n        });\n        let previousScene = scenes[index - 1];\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = index - 1; j >= 0; j--) {\n            const s = scenes[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previousScene = s;\n              break;\n            }\n          }\n        }\n\n        const headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return /*#__PURE__*/React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, /*#__PURE__*/React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          previousScene: previousScene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          onHeaderHeightChange: this.handleHeaderLayout,\n          getPreviousRoute: getPreviousRoute,\n          getFocusedRoute: this.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    });\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","render","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","isScreensEnabled","Platform","isParentHeaderShown","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","handleLayout","focused","gesture","isScreenActive","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","getPreviousRoute","previousScene","j","s","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { MaybeScreenContainer, MaybeScreen } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS and web, so we only enable it on Android\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled = Platform.OS !== 'ios' && mode !== 'modal';\n\n    return (\n      <HeaderShownContext.Consumer>\n        {(isParentHeaderShown) => {\n          const isFloatHeaderAbsolute =\n            headerMode === 'float'\n              ? this.state.scenes.slice(-2).some((scene) => {\n                  const { descriptor } = scene;\n                  const options = descriptor ? descriptor.options : {};\n                  const {\n                    headerTransparent,\n                    headerShown = isParentHeaderShown === false,\n                  } = options;\n\n                  if (headerTransparent || headerShown === false) {\n                    return true;\n                  }\n\n                  return false;\n                })\n              : false;\n\n          const floatingHeader =\n            headerMode === 'float' ? (\n              <React.Fragment key=\"header\">\n                {renderHeader({\n                  mode: 'float',\n                  layout,\n                  insets: { top, right, bottom, left },\n                  scenes,\n                  getPreviousRoute,\n                  getFocusedRoute: this.getFocusedRoute,\n                  onContentHeightChange: this.handleHeaderLayout,\n                  gestureDirection:\n                    focusedOptions.gestureDirection !== undefined\n                      ? focusedOptions.gestureDirection\n                      : defaultTransitionPreset.gestureDirection,\n                  styleInterpolator:\n                    focusedOptions.headerStyleInterpolator !== undefined\n                      ? focusedOptions.headerStyleInterpolator\n                      : defaultTransitionPreset.headerStyleInterpolator,\n                  style: [\n                    styles.floating,\n                    isFloatHeaderAbsolute && styles.absolute,\n                  ],\n                })}\n              </React.Fragment>\n            ) : null;\n\n          return (\n            <React.Fragment>\n              {isFloatHeaderAbsolute ? null : floatingHeader}\n              <MaybeScreenContainer\n                enabled={isScreensEnabled}\n                style={styles.container}\n                onLayout={this.handleLayout}\n              >\n                {routes.map((route, index, self) => {\n                  const focused = focusedRoute.key === route.key;\n                  const gesture = gestures[route.key];\n                  const scene = scenes[index];\n\n                  const isScreenActive = scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1;\n\n                  const {\n                    safeAreaInsets,\n                    headerShown = isParentHeaderShown === false,\n                    headerTransparent,\n                    cardShadowEnabled,\n                    cardOverlayEnabled,\n                    cardOverlay,\n                    cardStyle,\n                    animationEnabled,\n                    gestureResponseDistance,\n                    gestureVelocityImpact,\n                    gestureDirection = defaultTransitionPreset.gestureDirection,\n                    transitionSpec = defaultTransitionPreset.transitionSpec,\n                    cardStyleInterpolator = animationEnabled === false\n                      ? forNoAnimationCard\n                      : defaultTransitionPreset.cardStyleInterpolator,\n                    headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                  } = scene.descriptor\n                    ? scene.descriptor.options\n                    : ({} as StackNavigationOptions);\n\n                  let transitionConfig = {\n                    gestureDirection,\n                    transitionSpec,\n                    cardStyleInterpolator,\n                    headerStyleInterpolator,\n                  };\n\n                  // When a screen is not the last, it should use next screen's transition config\n                  // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n                  // For example combining a slide and a modal transition would look wrong otherwise\n                  // With this approach, combining different transition styles in the same navigator mostly looks right\n                  // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n                  // but majority of the transitions look alright\n                  if (index !== self.length - 1) {\n                    const nextScene = scenes[index + 1];\n\n                    if (nextScene) {\n                      const {\n                        animationEnabled,\n                        gestureDirection = defaultTransitionPreset.gestureDirection,\n                        transitionSpec = defaultTransitionPreset.transitionSpec,\n                        cardStyleInterpolator = animationEnabled === false\n                          ? forNoAnimationCard\n                          : defaultTransitionPreset.cardStyleInterpolator,\n                        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                      } = nextScene.descriptor\n                        ? nextScene.descriptor.options\n                        : ({} as StackNavigationOptions);\n\n                      transitionConfig = {\n                        gestureDirection,\n                        transitionSpec,\n                        cardStyleInterpolator,\n                        headerStyleInterpolator,\n                      };\n                    }\n                  }\n\n                  const {\n                    top: safeAreaInsetTop = insets.top,\n                    right: safeAreaInsetRight = insets.right,\n                    bottom: safeAreaInsetBottom = insets.bottom,\n                    left: safeAreaInsetLeft = insets.left,\n                  } = safeAreaInsets || {};\n\n                  const previousRoute = getPreviousRoute({\n                    route: scene.route,\n                  });\n\n                  let previousScene = scenes[index - 1];\n\n                  if (previousRoute) {\n                    // The previous scene will be shortly before the current scene in the array\n                    // So loop back from current index to avoid looping over the full array\n                    for (let j = index - 1; j >= 0; j--) {\n                      const s = scenes[j];\n\n                      if (s && s.route.key === previousRoute.key) {\n                        previousScene = s;\n                        break;\n                      }\n                    }\n                  }\n\n                  const headerHeight =\n                    headerMode !== 'none' && headerShown !== false\n                      ? headerHeights[route.key]\n                      : 0;\n\n                  return (\n                    <MaybeScreen\n                      key={route.key}\n                      style={StyleSheet.absoluteFill}\n                      enabled={isScreensEnabled}\n                      active={isScreenActive}\n                      pointerEvents=\"box-none\"\n                    >\n                      <CardContainer\n                        index={index}\n                        active={index === self.length - 1}\n                        focused={focused}\n                        closing={closingRouteKeys.includes(route.key)}\n                        layout={layout}\n                        gesture={gesture}\n                        scene={scene}\n                        previousScene={previousScene}\n                        safeAreaInsetTop={safeAreaInsetTop}\n                        safeAreaInsetRight={safeAreaInsetRight}\n                        safeAreaInsetBottom={safeAreaInsetBottom}\n                        safeAreaInsetLeft={safeAreaInsetLeft}\n                        cardOverlay={cardOverlay}\n                        cardOverlayEnabled={cardOverlayEnabled}\n                        cardShadowEnabled={cardShadowEnabled}\n                        cardStyle={cardStyle}\n                        onPageChangeStart={onPageChangeStart}\n                        onPageChangeConfirm={onPageChangeConfirm}\n                        onPageChangeCancel={onPageChangeCancel}\n                        gestureResponseDistance={gestureResponseDistance}\n                        headerHeight={headerHeight}\n                        onHeaderHeightChange={this.handleHeaderLayout}\n                        getPreviousRoute={getPreviousRoute}\n                        getFocusedRoute={this.getFocusedRoute}\n                        mode={mode}\n                        headerMode={headerMode}\n                        headerShown={headerShown}\n                        hasAbsoluteHeader={\n                          isFloatHeaderAbsolute && !headerTransparent\n                        }\n                        renderHeader={renderHeader}\n                        renderScene={renderScene}\n                        onOpenRoute={onOpenRoute}\n                        onCloseRoute={onCloseRoute}\n                        onTransitionStart={onTransitionStart}\n                        onTransitionEnd={onTransitionEnd}\n                        gestureEnabled={\n                          index !== 0 && getGesturesEnabled({ route })\n                        }\n                        gestureVelocityImpact={gestureVelocityImpact}\n                        {...transitionConfig}\n                      />\n                    </MaybeScreen>\n                  );\n                })}\n              </MaybeScreenContainer>\n              {isFloatHeaderAbsolute ? floatingHeader : null}\n            </React.Fragment>\n          );\n        }}\n      </HeaderShownContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}