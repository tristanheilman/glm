{"ast":null,"code":"import { Animated, I18nManager } from 'react-native';\nconst {\n  add\n} = Animated;\n/**\n * Standard UIKit style animation for the header where the title fades into the back button label.\n */\n\nexport function forUIKit({\n  current,\n  next,\n  layouts\n}) {\n  const defaultOffset = 100;\n  const leftSpacing = 27; // The title and back button title should cross-fade to each other\n  // When screen is fully open, the title should be in center, and back title should be on left\n  // When screen is closing, the previous title will animate to back title's position\n  // And back title will animate to title's position\n  // We achieve this by calculating the offsets needed to translate title to back title's position and vice-versa\n\n  const leftLabelOffset = layouts.leftLabel ? (layouts.screen.width - layouts.leftLabel.width) / 2 - leftSpacing : defaultOffset;\n  const titleLeftOffset = layouts.title ? (layouts.screen.width - layouts.title.width) / 2 - leftSpacing : defaultOffset; // When the current title is animating to right, it is centered in the right half of screen in middle of transition\n  // The back title also animates in from this position\n\n  const rightOffset = layouts.screen.width / 4;\n  const progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  return {\n    leftButtonStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0.3, 1, 1.5],\n        outputRange: [0, 1, 0]\n      })\n    },\n    leftLabelStyle: {\n      transform: [{\n        translateX: progress.interpolate({\n          inputRange: [0, 1, 2],\n          outputRange: I18nManager.isRTL ? [-rightOffset, 0, leftLabelOffset] : [leftLabelOffset, 0, -rightOffset]\n        })\n      }]\n    },\n    rightButtonStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0.3, 1, 1.5],\n        outputRange: [0, 1, 0]\n      })\n    },\n    titleStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0, 0.4, 1, 1.5],\n        outputRange: [0, 0.1, 1, 0]\n      }),\n      transform: [{\n        translateX: progress.interpolate({\n          inputRange: [0.5, 1, 2],\n          outputRange: I18nManager.isRTL ? [-titleLeftOffset, 0, rightOffset] : [rightOffset, 0, -titleLeftOffset]\n        })\n      }]\n    },\n    backgroundStyle: {\n      transform: [{\n        translateX: progress.interpolate({\n          inputRange: [0, 1, 2],\n          outputRange: I18nManager.isRTL ? [-layouts.screen.width, 0, layouts.screen.width] : [layouts.screen.width, 0, -layouts.screen.width]\n        })\n      }]\n    }\n  };\n}\n/**\n * Simple fade animation for the header elements.\n */\n\nexport function forFade({\n  current,\n  next\n}) {\n  const progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  const opacity = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0]\n  });\n  return {\n    leftButtonStyle: {\n      opacity\n    },\n    rightButtonStyle: {\n      opacity\n    },\n    titleStyle: {\n      opacity\n    },\n    backgroundStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0, 1, 1.9, 2],\n        outputRange: [0, 1, 1, 0]\n      })\n    }\n  };\n}\n/**\n * Simple translate animation to translate the header to left.\n */\n\nexport function forSlideLeft({\n  current,\n  next,\n  layouts: {\n    screen\n  }\n}) {\n  const progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  const translateX = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: I18nManager.isRTL ? [-screen.width, 0, screen.width] : [screen.width, 0, -screen.width]\n  });\n  const transform = [{\n    translateX\n  }];\n  return {\n    leftButtonStyle: {\n      transform\n    },\n    rightButtonStyle: {\n      transform\n    },\n    titleStyle: {\n      transform\n    },\n    backgroundStyle: {\n      transform\n    }\n  };\n}\n/**\n * Simple translate animation to translate the header to right.\n */\n\nexport function forSlideRight({\n  current,\n  next,\n  layouts: {\n    screen\n  }\n}) {\n  const progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  const translateX = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: I18nManager.isRTL ? [screen.width, 0, -screen.width] : [-screen.width, 0, screen.width]\n  });\n  const transform = [{\n    translateX\n  }];\n  return {\n    leftButtonStyle: {\n      transform\n    },\n    rightButtonStyle: {\n      transform\n    },\n    titleStyle: {\n      transform\n    },\n    backgroundStyle: {\n      transform\n    }\n  };\n}\n/**\n * Simple translate animation to translate the header to slide up.\n */\n\nexport function forSlideUp({\n  current,\n  next,\n  layouts: {\n    header\n  }\n}) {\n  const progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  const translateY = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [-header.height, 0, -header.height]\n  });\n  const transform = [{\n    translateY\n  }];\n  return {\n    leftButtonStyle: {\n      transform\n    },\n    rightButtonStyle: {\n      transform\n    },\n    titleStyle: {\n      transform\n    },\n    backgroundStyle: {\n      transform\n    }\n  };\n}\nexport function forNoAnimation() {\n  return {};\n}","map":{"version":3,"sources":["HeaderStyleInterpolators.tsx"],"names":["add","layouts","defaultOffset","leftSpacing","leftLabelOffset","titleLeftOffset","rightOffset","progress","inputRange","outputRange","extrapolate","next","leftButtonStyle","opacity","leftLabelStyle","transform","translateX","I18nManager","rightButtonStyle","titleStyle","backgroundStyle","screen","header","translateY"],"mappings":"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","sourcesContent":["import { Animated, I18nManager } from 'react-native';\nimport {\n  StackHeaderInterpolationProps,\n  StackHeaderInterpolatedStyle,\n} from '../types';\n\nconst { add } = Animated;\n\n/**\n * Standard UIKit style animation for the header where the title fades into the back button label.\n */\nexport function forUIKit({\n  current,\n  next,\n  layouts,\n}: StackHeaderInterpolationProps): StackHeaderInterpolatedStyle {\n  const defaultOffset = 100;\n  const leftSpacing = 27;\n\n  // The title and back button title should cross-fade to each other\n  // When screen is fully open, the title should be in center, and back title should be on left\n  // When screen is closing, the previous title will animate to back title's position\n  // And back title will animate to title's position\n  // We achieve this by calculating the offsets needed to translate title to back title's position and vice-versa\n  const leftLabelOffset = layouts.leftLabel\n    ? (layouts.screen.width - layouts.leftLabel.width) / 2 - leftSpacing\n    : defaultOffset;\n  const titleLeftOffset = layouts.title\n    ? (layouts.screen.width - layouts.title.width) / 2 - leftSpacing\n    : defaultOffset;\n\n  // When the current title is animating to right, it is centered in the right half of screen in middle of transition\n  // The back title also animates in from this position\n  const rightOffset = layouts.screen.width / 4;\n\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  return {\n    leftButtonStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0.3, 1, 1.5],\n        outputRange: [0, 1, 0],\n      }),\n    },\n    leftLabelStyle: {\n      transform: [\n        {\n          translateX: progress.interpolate({\n            inputRange: [0, 1, 2],\n            outputRange: I18nManager.isRTL\n              ? [-rightOffset, 0, leftLabelOffset]\n              : [leftLabelOffset, 0, -rightOffset],\n          }),\n        },\n      ],\n    },\n    rightButtonStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0.3, 1, 1.5],\n        outputRange: [0, 1, 0],\n      }),\n    },\n    titleStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0, 0.4, 1, 1.5],\n        outputRange: [0, 0.1, 1, 0],\n      }),\n      transform: [\n        {\n          translateX: progress.interpolate({\n            inputRange: [0.5, 1, 2],\n            outputRange: I18nManager.isRTL\n              ? [-titleLeftOffset, 0, rightOffset]\n              : [rightOffset, 0, -titleLeftOffset],\n          }),\n        },\n      ],\n    },\n    backgroundStyle: {\n      transform: [\n        {\n          translateX: progress.interpolate({\n            inputRange: [0, 1, 2],\n            outputRange: I18nManager.isRTL\n              ? [-layouts.screen.width, 0, layouts.screen.width]\n              : [layouts.screen.width, 0, -layouts.screen.width],\n          }),\n        },\n      ],\n    },\n  };\n}\n\n/**\n * Simple fade animation for the header elements.\n */\nexport function forFade({\n  current,\n  next,\n}: StackHeaderInterpolationProps): StackHeaderInterpolatedStyle {\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const opacity = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0, 1, 0],\n  });\n\n  return {\n    leftButtonStyle: { opacity },\n    rightButtonStyle: { opacity },\n    titleStyle: { opacity },\n    backgroundStyle: {\n      opacity: progress.interpolate({\n        inputRange: [0, 1, 1.9, 2],\n        outputRange: [0, 1, 1, 0],\n      }),\n    },\n  };\n}\n\n/**\n * Simple translate animation to translate the header to left.\n */\nexport function forSlideLeft({\n  current,\n  next,\n  layouts: { screen },\n}: StackHeaderInterpolationProps): StackHeaderInterpolatedStyle {\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const translateX = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: I18nManager.isRTL\n      ? [-screen.width, 0, screen.width]\n      : [screen.width, 0, -screen.width],\n  });\n\n  const transform = [{ translateX }];\n\n  return {\n    leftButtonStyle: { transform },\n    rightButtonStyle: { transform },\n    titleStyle: { transform },\n    backgroundStyle: { transform },\n  };\n}\n\n/**\n * Simple translate animation to translate the header to right.\n */\nexport function forSlideRight({\n  current,\n  next,\n  layouts: { screen },\n}: StackHeaderInterpolationProps): StackHeaderInterpolatedStyle {\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const translateX = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: I18nManager.isRTL\n      ? [screen.width, 0, -screen.width]\n      : [-screen.width, 0, screen.width],\n  });\n\n  const transform = [{ translateX }];\n\n  return {\n    leftButtonStyle: { transform },\n    rightButtonStyle: { transform },\n    titleStyle: { transform },\n    backgroundStyle: { transform },\n  };\n}\n\n/**\n * Simple translate animation to translate the header to slide up.\n */\nexport function forSlideUp({\n  current,\n  next,\n  layouts: { header },\n}: StackHeaderInterpolationProps): StackHeaderInterpolatedStyle {\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const translateY = progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [-header.height, 0, -header.height],\n  });\n\n  const transform = [{ translateY }];\n\n  return {\n    leftButtonStyle: { transform },\n    rightButtonStyle: { transform },\n    titleStyle: { transform },\n    backgroundStyle: { transform },\n  };\n}\n\nexport function forNoAnimation(): StackHeaderInterpolatedStyle {\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}