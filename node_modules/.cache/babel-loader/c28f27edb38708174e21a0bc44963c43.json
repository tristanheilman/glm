{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NavigationHelpersContext, useTheme } from '@react-navigation/native'; // eslint-disable-next-line import/no-unresolved\n\nimport { ScreenContainer } from 'react-native-screens';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\n\nfunction SceneContent({\n  isFocused,\n  children\n}) {\n  const {\n    colors\n  } = useTheme();\n  return /*#__PURE__*/React.createElement(View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, children);\n}\n\nexport default class BottomTabView extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loaded: [this.props.state.index]\n    });\n\n    _defineProperty(this, \"renderTabBar\", () => {\n      const {\n        tabBar = props => /*#__PURE__*/React.createElement(BottomTabBar, props),\n        tabBarOptions,\n        state,\n        navigation,\n        descriptors\n      } = this.props;\n      return tabBar(_objectSpread(_objectSpread({}, tabBarOptions), {}, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      }));\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      index\n    } = nextProps.state;\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy\n    } = this.props;\n    const {\n      routes\n    } = state;\n    const {\n      loaded\n    } = this.state;\n    return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n      value: navigation\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(View, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(ScreenContainer, {\n      style: styles.pages\n    }, routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        // Don't render a screen if we've never navigated to it\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        isVisible: isFocused\n      }, /*#__PURE__*/React.createElement(SceneContent, {\n        isFocused: isFocused\n      }, descriptor.render()));\n    })), this.renderTabBar())));\n  }\n\n}\n\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["children","colors","useTheme","isFocused","styles","backgroundColor","background","BottomTabView","React","lazy","index","nextProps","loaded","prevState","tabBar","props","descriptors","state","navigation","render","routes","container","pages","descriptor","route","unmountOnBlur","StyleSheet","flex","overflow","content"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AAEA,SAAA,wBAAA,EAAA,QAAA,QAAA,0BAAA,C,CAKA;;AACA,SAAA,eAAA,QAAA,sBAAA;AAEA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,OAAA,YAAA,MAAA,gBAAA;;AAkBA,SAAA,YAAA,CAAsB;AAAA,EAAA,SAAA;AAEpBA,EAAAA;AAFoB,CAAtB,EAMG;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAaC,QAAnB,EAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,2BAA2B,EAAE,CAD/B,SAAA;AAEE,IAAA,yBAAyB,EAAEC,SAAS,GAAA,MAAA,GAFtC,qBAAA;AAGE,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,OAAA,EAAiB;AAAEC,MAAAA,eAAe,EAAEJ,MAAM,CAACK;AAA1B,KAAjB;AAHT,GAAA,EADF,QACE,CADF;AASD;;AAED,eAAe,MAAA,aAAA,SAA4BE,KAAK,CAAjC,SAAA,CAA0D;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAgB/D;AACNI,MAAAA,MAAM,EAAE,CAAC,KAAA,KAAA,CAAA,KAAA,CAAD,KAAA;AADF,KAhB+D,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAoBhD,MAAM;AAC3B,YAAM;AACJE,QAAAA,MAAM,GAAIC,KAAD,IAAA,aAA8B,KAAA,CAAA,aAAA,CAAA,YAAA,EADnC,KACmC,CADnC;AAAA,QAAA,aAAA;AAAA,QAAA,KAAA;AAAA,QAAA,UAAA;AAKJC,QAAAA;AALI,UAMF,KANJ,KAAA;AAOA,aAAOF,MAAM,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,EAAA,EAAA;AAEXG,QAAAA,KAAK,EAFM,KAAA;AAGXD,QAAAA,WAAW,EAHA,WAAA;AAIXE,QAAAA,UAAU,EAAEA;AAJD,OAAA,CAAA,CAAb;AA5BqE,KAAA,CAAA;AAAA;;AAKvE,SAAA,wBAAA,CAAA,SAAA,EAAA,SAAA,EAAoE;AAClE,UAAM;AAAER,MAAAA;AAAF,QAAYC,SAAS,CAA3B,KAAA;AAEA,WAAO;AACL;AACAC,MAAAA,MAAM,EAAEC,SAAS,CAATA,MAAAA,CAAAA,QAAAA,CAAAA,KAAAA,IACJA,SAAS,CADLA,MAAAA,GAEJ,CAAC,GAAGA,SAAS,CAAb,MAAA,EAAA,KAAA;AAJC,KAAP;AAMD;;AAsBDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,WAAA;AAAA,MAAA,UAAA;AAAkCV,MAAAA;AAAlC,QAA2C,KAAjD,KAAA;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAN,KAAA;AACA,UAAM;AAAER,MAAAA;AAAF,QAAa,KAAnB,KAAA;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AAAmC,MAAA,KAAK,EAAEM;AAA1C,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEd,MAAM,CAACiB;AAApB,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,MAAA,KAAK,EAAEjB,MAAM,CAACkB;AAA/B,KAAA,EACG,MAAM,CAAN,GAAA,CAAW,CAAA,KAAA,EAAA,KAAA,KAAkB;AAC5B,YAAMC,UAAU,GAAGP,WAAW,CAACQ,KAAK,CAApC,GAA8B,CAA9B;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAoBF,UAAU,CAApC,OAAA;AACA,YAAMpB,SAAS,GAAGc,KAAK,CAALA,KAAAA,KAAlB,KAAA;;AAEA,UAAIQ,aAAa,IAAI,CAArB,SAAA,EAAiC;AAC/B,eAAA,IAAA;AACD;;AAED,UAAIhB,IAAI,IAAI,CAACG,MAAM,CAANA,QAAAA,CAATH,KAASG,CAATH,IAAmC,CAAvC,SAAA,EAAmD;AACjD;AACA,eAAA,IAAA;AACD;;AAED,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;AACE,QAAA,GAAG,EAAEe,KAAK,CADZ,GAAA;AAEE,QAAA,KAAK,EAAEE,UAAU,CAFnB,YAAA;AAGE,QAAA,SAAS,EAAEvB;AAHb,OAAA,EAAA,aAKE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAc,QAAA,SAAS,EAAEA;AAAzB,OAAA,EACGoB,UAAU,CAPjB,MAOOA,EADH,CALF,CADF;AAhBN,KAEK,CADH,CADF,EA6BG,KAhCT,YAgCS,EA7BH,CADF,CADF,CADF;AAqCD;;AA9EsE;;gBAApDhB,a,kBACG;AACpBE,EAAAA,IAAI,EAAE;AADc,C;;AAgFxB,MAAML,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BiB,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BN,EAAAA,KAAK,EAAE;AACLK,IAAAA,IAAI,EAAE;AADD,GALwB;AAQ/BE,EAAAA,OAAO,EAAE;AACPF,IAAAA,IAAI,EAAE;AADC;AARsB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: number[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.state.index],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const { state, descriptors, navigation, lazy } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <View style={styles.container}>\n            <ScreenContainer style={styles.pages}>\n              {routes.map((route, index) => {\n                const descriptor = descriptors[route.key];\n                const { unmountOnBlur } = descriptor.options;\n                const isFocused = state.index === index;\n\n                if (unmountOnBlur && !isFocused) {\n                  return null;\n                }\n\n                if (lazy && !loaded.includes(index) && !isFocused) {\n                  // Don't render a screen if we've never navigated to it\n                  return null;\n                }\n\n                return (\n                  <ResourceSavingScene\n                    key={route.key}\n                    style={StyleSheet.absoluteFill}\n                    isVisible={isFocused}\n                  >\n                    <SceneContent isFocused={isFocused}>\n                      {descriptor.render()}\n                    </SceneContent>\n                  </ResourceSavingScene>\n                );\n              })}\n            </ScreenContainer>\n            {this.renderTabBar()}\n          </View>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}